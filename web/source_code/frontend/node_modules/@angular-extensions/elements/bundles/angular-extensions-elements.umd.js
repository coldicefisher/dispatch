(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@angular-extensions/elements', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['angular-extensions'] = global['angular-extensions'] || {}, global['angular-extensions'].elements = {}), global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, (function (exports, i0, common, rxjs, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var LAZY_ELEMENT_CONFIGS = new i0.InjectionToken('LAZY_ELEMENT_CONFIGS');
    var LAZY_ELEMENT_ROOT_OPTIONS = new i0.InjectionToken('LAZY_ELEMENT_ROOT_OPTIONS');
    var LAZY_ELEMENT_ROOT_GUARD = new i0.InjectionToken('LAZY_ELEMENT_ROOT_GUARD');
    var LAZY_ELEMENTS_REGISTRY = new i0.InjectionToken('LAZY_ELEMENTS_REGISTRY', {
        providedIn: 'root',
        factory: function () { return new Map(); },
    });

    var LOG_PREFIX$2 = '@angular-extensions/elements';
    var LazyElementsLoaderService = /** @class */ (function () {
        function LazyElementsLoaderService(errorHandler, registry, options) {
            this.errorHandler = errorHandler;
            this.registry = registry;
            this.options = options;
            this.configs = [];
            if (!options) {
                this.options = {};
            }
        }
        LazyElementsLoaderService.prototype.addConfigs = function (newConfigs) {
            var _this = this;
            newConfigs.forEach(function (newConfig) {
                var existingConfig = _this.getElementConfig(newConfig.tag);
                if (existingConfig) {
                    ngDevMode &&
                        console.warn(LOG_PREFIX$2 + " - ElementConfig for tag '" + newConfig.tag + "' was previously added, it will not be added multiple times, continue...");
                }
                else {
                    newConfig.isAdded = true;
                    _this.configs.push(newConfig);
                    var shouldPreload = newConfig.preload !== undefined
                        ? newConfig.preload
                        : _this.options.preload;
                    if (shouldPreload) {
                        _this.loadElement(newConfig.url, newConfig.tag, newConfig.isModule, newConfig.importMap, newConfig.hooks);
                    }
                }
            });
        };
        LazyElementsLoaderService.prototype.getElementConfig = function (tag) {
            return this.configs.find(function (config) { return config.tag === tag; });
        };
        LazyElementsLoaderService.prototype.preload = function (tags) {
            var _this = this;
            var configs = this.configs;
            if (tags) {
                configs = this.configs.filter(function (config) { return tags.includes(config.tag); });
            }
            configs.forEach(function (config) { return _this.loadElement(config.url, config.tag, config.isModule, config.importMap, config.hooks); });
        };
        LazyElementsLoaderService.prototype.loadElement = function (url, tag, isModule, importMap, hooksConfig) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            return __awaiter(this, void 0, void 0, function () {
                // The `load` and `error` event listeners capture `this`. That's why they have to be removed manually.
                // Otherwise, the `LazyElementsLoaderService` is not going to be GC'd.
                function cleanup() {
                    script_1.removeEventListener('load', onLoad_1);
                    script_1.removeEventListener('error', onError_1);
                }
                var config, notifier_1, beforeLoadHook, afterLoadHook_1, script_1, onLoad_1, onError_1;
                var _this = this;
                return __generator(this, function (_o) {
                    switch (_o.label) {
                        case 0:
                            config = this.getElementConfig(tag);
                            isModule !== null && isModule !== void 0 ? isModule : (isModule = (_a = config === null || config === void 0 ? void 0 : config.isModule) !== null && _a !== void 0 ? _a : this.options.isModule);
                            importMap !== null && importMap !== void 0 ? importMap : (importMap = (_b = config === null || config === void 0 ? void 0 : config.importMap) !== null && _b !== void 0 ? _b : this.options.importMap);
                            if (ngDevMode && !tag) {
                                throw new Error(LOG_PREFIX$2 + " - tag for '" + url + "' not found, the *axLazyElement has to be used on HTML element");
                            }
                            if (!url) {
                                if (ngDevMode && !(config === null || config === void 0 ? void 0 : config.url) && !importMap) {
                                    throw new Error(LOG_PREFIX$2 + " - url for <" + tag + "> not found");
                                }
                                else if (importMap) {
                                    url = tag;
                                }
                                else {
                                    url = config.url;
                                }
                            }
                            if (!!this.hasElement(url)) return [3 /*break*/, 3];
                            notifier_1 = this.addElement(url);
                            beforeLoadHook = (_e = (_c = hooksConfig === null || hooksConfig === void 0 ? void 0 : hooksConfig.beforeLoad) !== null && _c !== void 0 ? _c : (_d = config === null || config === void 0 ? void 0 : config.hooks) === null || _d === void 0 ? void 0 : _d.beforeLoad) !== null && _e !== void 0 ? _e : (_g = (_f = this.options) === null || _f === void 0 ? void 0 : _f.hooks) === null || _g === void 0 ? void 0 : _g.beforeLoad;
                            afterLoadHook_1 = (_k = (_h = hooksConfig === null || hooksConfig === void 0 ? void 0 : hooksConfig.afterLoad) !== null && _h !== void 0 ? _h : (_j = config === null || config === void 0 ? void 0 : config.hooks) === null || _j === void 0 ? void 0 : _j.afterLoad) !== null && _k !== void 0 ? _k : (_m = (_l = this.options) === null || _l === void 0 ? void 0 : _l.hooks) === null || _m === void 0 ? void 0 : _m.afterLoad;
                            if (!importMap) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.resolveImportMap(url)];
                        case 1:
                            url = _o.sent();
                            _o.label = 2;
                        case 2:
                            script_1 = document.createElement('script');
                            if (isModule) {
                                script_1.type = 'module';
                            }
                            script_1.src = url;
                            onLoad_1 = function () {
                                if (afterLoadHook_1) {
                                    _this.handleHook(afterLoadHook_1, tag)
                                        .then(notifier_1.resolve)
                                        .catch(notifier_1.reject);
                                }
                                else {
                                    notifier_1.resolve();
                                }
                                cleanup();
                            };
                            onError_1 = function (error) {
                                notifier_1.reject(error);
                                cleanup();
                                // Caretaker note: don't put it before the `reject` and `cleanup` since the user may have some
                                // custom error handler that will re-throw the error through `throw error`. Hence the code won't
                                // be executed, and the promise won't be rejected.
                                _this.errorHandler.handleError(error);
                            };
                            script_1.addEventListener('load', onLoad_1);
                            script_1.addEventListener('error', onError_1);
                            if (beforeLoadHook) {
                                this.handleHook(beforeLoadHook, tag)
                                    .then(function () { return document.body.appendChild(script_1); })
                                    .catch(notifier_1.reject);
                            }
                            else {
                                document.body.appendChild(script_1);
                            }
                            _o.label = 3;
                        case 3: return [2 /*return*/, this.registry.get(this.stripUrlProtocol(url))];
                    }
                });
            });
        };
        LazyElementsLoaderService.prototype.addElement = function (url) {
            var notifier;
            this.registry.set(this.stripUrlProtocol(url), new Promise(function (resolve, reject) { return (notifier = { resolve: resolve, reject: reject }); }));
            return notifier;
        };
        LazyElementsLoaderService.prototype.hasElement = function (url) {
            return this.registry.has(this.stripUrlProtocol(url));
        };
        LazyElementsLoaderService.prototype.stripUrlProtocol = function (url) {
            return url.replace(/https?:\/\//, '');
        };
        LazyElementsLoaderService.prototype.handleHook = function (hook, tag) {
            try {
                return Promise.resolve(hook(tag));
            }
            catch (err) {
                return Promise.reject(err);
            }
        };
        LazyElementsLoaderService.prototype.resolveImportMap = function (url) {
            return __awaiter(this, void 0, void 0, function () {
                var System;
                return __generator(this, function (_o) {
                    switch (_o.label) {
                        case 0:
                            System = window.System;
                            if (!System) return [3 /*break*/, 2];
                            return [4 /*yield*/, System.prepareImport()];
                        case 1:
                            _o.sent();
                            url = System.resolve(url);
                            return [3 /*break*/, 3];
                        case 2:
                            if (ngDevMode) {
                                throw new Error(LOG_PREFIX$2 + " - importMap feature depends on SystemJS library to be globally loaded but none was found, thus '" + url + "' can't be resolved. You should either load SystemJS or remove the importMap flag.");
                            }
                            _o.label = 3;
                        case 3: return [2 /*return*/, url];
                    }
                });
            });
        };
        return LazyElementsLoaderService;
    }());
    LazyElementsLoaderService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementsLoaderService, deps: [{ token: i0__namespace.ErrorHandler }, { token: LAZY_ELEMENTS_REGISTRY }, { token: LAZY_ELEMENT_ROOT_OPTIONS, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    LazyElementsLoaderService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementsLoaderService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementsLoaderService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ErrorHandler }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [LAZY_ELEMENTS_REGISTRY]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LAZY_ELEMENT_ROOT_OPTIONS]
                        }] }];
        } });

    var LOG_PREFIX$1 = '@angular-extensions/elements';
    var LazyElementDirective = /** @class */ (function () {
        function LazyElementDirective(platformId, vcr, template, elementsLoaderService, cfr, cdr) {
            this.platformId = platformId;
            this.vcr = vcr;
            this.template = template;
            this.elementsLoaderService = elementsLoaderService;
            this.cfr = cfr;
            this.cdr = cdr;
            this.url = null;
            this.loadingTemplateRef = null;
            this.errorTemplateRef = null;
            this.isModule = false; // eslint-disable-line @angular-eslint/no-input-rename
            this.importMap = false; // eslint-disable-line @angular-eslint/no-input-rename
            this.viewRef = null;
            this.subscription = rxjs.Subscription.EMPTY;
            this.url$ = new rxjs.BehaviorSubject(null);
        }
        LazyElementDirective.prototype.ngOnChanges = function (changes) {
            if (changes.url) {
                this.url$.next(this.url);
            }
        };
        LazyElementDirective.prototype.ngOnInit = function () {
            // There's no sense to execute the below logic on the Node.js side since the JavaScript
            // will not be loaded on the server-side (Angular will only append the script to body).
            // The `loadElement` promise will never be resolved, since it gets resolved when the `load` event is emitted.
            // `customElements` are also undefined on the Node.js side; thus, it will always render the error template.
            if (common.isPlatformServer(this.platformId)) {
                return;
            }
            this.setupUrlListener();
        };
        LazyElementDirective.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        LazyElementDirective.prototype.destroyEmbeddedView = function () {
            if (this.viewRef && !this.viewRef.destroyed) {
                this.viewRef.detach();
                this.viewRef.destroy();
                this.viewRef = null;
            }
        };
        LazyElementDirective.prototype.setupUrlListener = function () {
            var _this = this;
            var tpl = this.template;
            var elementTag = tpl._declarationTContainer
                ? tpl._declarationTContainer.tagName || tpl._declarationTContainer.value
                : tpl._def.element.template.nodes[0].element.name;
            var elementConfig = this.elementsLoaderService.getElementConfig(elementTag) ||
                {};
            var options = this.elementsLoaderService.options;
            var loadingComponent = elementConfig.loadingComponent || options.loadingComponent;
            this.subscription = this.url$
                .pipe(
            // This is used to coalesce changes since the `url$` subject might emit multiple values initially, e.g.
            // `null` (initial value) and the url itself (when the `url` binding is provided).
            // The `animationFrameScheduler` is used to prevent the frame drop.
            operators.debounceTime(0, rxjs.animationFrameScheduler), operators.switchMap(function (url) {
                if (_this.loadingTemplateRef) {
                    _this.vcr.createEmbeddedView(_this.loadingTemplateRef);
                }
                else if (loadingComponent) {
                    var factory = _this.cfr.resolveComponentFactory(loadingComponent);
                    _this.vcr.createComponent(factory);
                }
                return rxjs.from(_this.elementsLoaderService.loadElement(url, elementTag, _this.isModule, _this.importMap, elementConfig === null || elementConfig === void 0 ? void 0 : elementConfig.hooks)).pipe(operators.catchError(function () {
                    _this.vcr.clear();
                    var errorComponent = elementConfig.errorComponent || options.errorComponent;
                    if (_this.errorTemplateRef) {
                        _this.vcr.createEmbeddedView(_this.errorTemplateRef);
                        _this.cdr.markForCheck();
                    }
                    else if (errorComponent) {
                        var factory = _this.cfr.resolveComponentFactory(errorComponent);
                        _this.vcr.createComponent(factory);
                        _this.cdr.markForCheck();
                    }
                    else if (ngDevMode) {
                        console.error(LOG_PREFIX$1 + " - Loading of element <" + elementTag + "> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElement=\"errorTemplate: error\" to display customized error message in place of element");
                    }
                    return rxjs.EMPTY;
                }));
            }), operators.mergeMap(function () { return customElements.whenDefined(elementTag); }))
                .subscribe({
                next: function () {
                    _this.vcr.clear();
                    _this.viewRef = _this.vcr.createEmbeddedView(_this.template);
                    _this.cdr.markForCheck();
                },
            });
        };
        return LazyElementDirective;
    }());
    LazyElementDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementDirective, deps: [{ token: i0.PLATFORM_ID }, { token: i0__namespace.ViewContainerRef }, { token: i0__namespace.TemplateRef }, { token: LazyElementsLoaderService }, { token: i0__namespace.ComponentFactoryResolver }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    LazyElementDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.0", type: LazyElementDirective, selector: "[axLazyElement]", inputs: { url: ["axLazyElement", "url"], loadingTemplateRef: ["axLazyElementLoadingTemplate", "loadingTemplateRef"], errorTemplateRef: ["axLazyElementErrorTemplate", "errorTemplateRef"], isModule: ["axLazyElementModule", "isModule"], importMap: ["axLazyElementImportMap", "importMap"] }, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[axLazyElement]',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }, { type: i0__namespace.ViewContainerRef }, { type: i0__namespace.TemplateRef }, { type: LazyElementsLoaderService }, { type: i0__namespace.ComponentFactoryResolver }, { type: i0__namespace.ChangeDetectorRef }];
        }, propDecorators: { url: [{
                    type: i0.Input,
                    args: ['axLazyElement']
                }], loadingTemplateRef: [{
                    type: i0.Input,
                    args: ['axLazyElementLoadingTemplate']
                }], errorTemplateRef: [{
                    type: i0.Input,
                    args: ['axLazyElementErrorTemplate']
                }], isModule: [{
                    type: i0.Input,
                    args: ['axLazyElementModule']
                }], importMap: [{
                    type: i0.Input,
                    args: ['axLazyElementImportMap']
                }] } });

    var LOG_PREFIX = '@angular-extensions/elements';
    var LazyElementDynamicDirective = /** @class */ (function () {
        function LazyElementDynamicDirective(platformId, document, renderer, vcr, cfr, cdr, template, elementsLoaderService) {
            this.platformId = platformId;
            this.document = document;
            this.renderer = renderer;
            this.vcr = vcr;
            this.cfr = cfr;
            this.cdr = cdr;
            this.template = template;
            this.elementsLoaderService = elementsLoaderService;
            this.tag = null;
            this.url = null; // eslint-disable-line @angular-eslint/no-input-rename
            this.loadingTemplateRef = null;
            this.errorTemplateRef = null;
            this.isModule = false; // eslint-disable-line @angular-eslint/no-input-rename
            this.importMap = false; // eslint-disable-line @angular-eslint/no-input-rename
            this.viewRef = null;
            this.subscription = rxjs.Subscription.EMPTY;
        }
        LazyElementDynamicDirective.prototype.ngOnInit = function () {
            var _this = this;
            // There's no sense to execute the below logic on the Node.js side since the JavaScript
            // will not be loaded on the server-side (Angular will only append the script to body).
            // The `loadElement` promise will never be resolved, since it gets resolved when the `load` event is emitted.
            // `customElements` are also undefined on the Node.js side; thus, it will always render the error template.
            if (common.isPlatformServer(this.platformId)) {
                return;
            }
            if (ngDevMode) {
                if (!this.tag || this.tag.length === 0 || !this.tag.includes('-')) {
                    throw new Error(LOG_PREFIX + " - Valid tag has to be specified when using *axLazyElementDynamic directive (use *axLazyElementDynamic=\"'some-tag'\"), got: \"" + this.tag + "\"");
                }
            }
            var tag = this.tag;
            var elementConfig = this.elementsLoaderService.getElementConfig(tag) || {};
            var options = this.elementsLoaderService.options;
            var loadingComponent = elementConfig.loadingComponent || options.loadingComponent;
            if (this.loadingTemplateRef) {
                this.vcr.createEmbeddedView(this.loadingTemplateRef);
            }
            else if (loadingComponent) {
                var factory = this.cfr.resolveComponentFactory(loadingComponent);
                this.vcr.createComponent(factory);
            }
            var loadElement$ = rxjs.from(this.elementsLoaderService.loadElement(this.url, tag, this.isModule, this.importMap, elementConfig === null || elementConfig === void 0 ? void 0 : elementConfig.hooks));
            this.subscription = loadElement$
                .pipe(operators.mergeMap(function () { return customElements.whenDefined(tag); }))
                .subscribe({
                next: function () {
                    _this.vcr.clear();
                    var originalCreateElement = _this.renderer.createElement;
                    _this.renderer.createElement = function (name, namespace) {
                        if (name === 'ax-lazy-element') {
                            name = tag;
                        }
                        return _this.document.createElement(name);
                    };
                    _this.viewRef = _this.vcr.createEmbeddedView(_this.template);
                    _this.renderer.createElement = originalCreateElement;
                    _this.cdr.markForCheck();
                },
                error: function (error) {
                    var errorComponent = elementConfig.errorComponent || options.errorComponent;
                    _this.vcr.clear();
                    if (_this.errorTemplateRef) {
                        _this.vcr.createEmbeddedView(_this.errorTemplateRef);
                        _this.cdr.markForCheck();
                    }
                    else if (errorComponent) {
                        var factory = _this.cfr.resolveComponentFactory(errorComponent);
                        _this.vcr.createComponent(factory);
                        _this.cdr.markForCheck();
                    }
                    else if (ngDevMode) {
                        console.error(LOG_PREFIX + " - Loading of element <" + _this.tag + "> failed, please provide <ng-template #error>Loading failed...</ng-template> and reference it in *axLazyElementDynamic=\"errorTemplate: error\" to display customized error message in place of element\n\n", error);
                    }
                },
            });
        };
        LazyElementDynamicDirective.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        LazyElementDynamicDirective.prototype.destroyEmbeddedView = function () {
            if (this.viewRef && !this.viewRef.destroyed) {
                this.viewRef.detach();
                this.viewRef.destroy();
                this.viewRef = null;
            }
        };
        return LazyElementDynamicDirective;
    }());
    LazyElementDynamicDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementDynamicDirective, deps: [{ token: i0.PLATFORM_ID }, { token: common.DOCUMENT }, { token: i0__namespace.Renderer2 }, { token: i0__namespace.ViewContainerRef }, { token: i0__namespace.ComponentFactoryResolver }, { token: i0__namespace.ChangeDetectorRef }, { token: i0__namespace.TemplateRef }, { token: LazyElementsLoaderService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    LazyElementDynamicDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.1.0", type: LazyElementDynamicDirective, selector: "[axLazyElementDynamic]", inputs: { tag: ["axLazyElementDynamic", "tag"], url: ["axLazyElementDynamicUrl", "url"], loadingTemplateRef: ["axLazyElementDynamicLoadingTemplate", "loadingTemplateRef"], errorTemplateRef: ["axLazyElementDynamicErrorTemplate", "errorTemplateRef"], isModule: ["axLazyElementDynamicModule", "isModule"], importMap: ["axLazyElementDynamicImportMap", "importMap"] }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementDynamicDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[axLazyElementDynamic]',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.PLATFORM_ID]
                        }] }, { type: Document, decorators: [{
                            type: i0.Inject,
                            args: [common.DOCUMENT]
                        }] }, { type: i0__namespace.Renderer2 }, { type: i0__namespace.ViewContainerRef }, { type: i0__namespace.ComponentFactoryResolver }, { type: i0__namespace.ChangeDetectorRef }, { type: i0__namespace.TemplateRef }, { type: LazyElementsLoaderService }];
        }, propDecorators: { tag: [{
                    type: i0.Input,
                    args: ['axLazyElementDynamic']
                }], url: [{
                    type: i0.Input,
                    args: ['axLazyElementDynamicUrl']
                }], loadingTemplateRef: [{
                    type: i0.Input,
                    args: ['axLazyElementDynamicLoadingTemplate']
                }], errorTemplateRef: [{
                    type: i0.Input,
                    args: ['axLazyElementDynamicErrorTemplate']
                }], isModule: [{
                    type: i0.Input,
                    args: ['axLazyElementDynamicModule']
                }], importMap: [{
                    type: i0.Input,
                    args: ['axLazyElementDynamicImportMap']
                }] } });

    "use strict";

    function createLazyElementRootGuard(rootOptions) {
        if (ngDevMode && rootOptions) {
            throw new TypeError("LazyElementsModule.forRoot() called twice. Feature modules should use LazyElementsModule.forFeature() instead.");
        }
        return 'LazyElementsModule.forRoot() multiple execution guard';
    }
    var LazyElementsModule = /** @class */ (function () {
        function LazyElementsModule(lazyElementsLoaderService, elementConfigsMultiProvider, guard) {
            if (elementConfigsMultiProvider && elementConfigsMultiProvider.length) {
                elementConfigsMultiProvider
                    .filter(function (configs) { return configs.some(function (config) { return !config.isAdded; }); })
                    .forEach(function (configs) { return lazyElementsLoaderService.addConfigs(configs); });
            }
        }
        LazyElementsModule.forRoot = function (options) {
            return {
                ngModule: LazyElementsModule,
                providers: [
                    {
                        provide: LAZY_ELEMENT_CONFIGS,
                        useValue: options && options.elementConfigs ? options.elementConfigs : [],
                        multi: true,
                    },
                    {
                        provide: LAZY_ELEMENT_ROOT_OPTIONS,
                        useValue: options.rootOptions ? options.rootOptions : {},
                    },
                    {
                        provide: LAZY_ELEMENT_ROOT_GUARD,
                        useFactory: createLazyElementRootGuard,
                        deps: [[LAZY_ELEMENT_ROOT_OPTIONS, new i0.Optional(), new i0.SkipSelf()]],
                    },
                ],
            };
        };
        LazyElementsModule.forFeature = function (options) {
            return {
                ngModule: LazyElementsModule,
                providers: [
                    {
                        provide: LAZY_ELEMENT_CONFIGS,
                        useValue: options && options.elementConfigs ? options.elementConfigs : [],
                        multi: true,
                    },
                ],
            };
        };
        return LazyElementsModule;
    }());
    LazyElementsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementsModule, deps: [{ token: LazyElementsLoaderService }, { token: LAZY_ELEMENT_CONFIGS, optional: true }, { token: LAZY_ELEMENT_ROOT_GUARD, optional: true }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    LazyElementsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementsModule, declarations: [LazyElementDirective, LazyElementDynamicDirective], imports: [common.CommonModule], exports: [LazyElementDirective, LazyElementDynamicDirective] });
    LazyElementsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementsModule, providers: [], imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.0", ngImport: i0__namespace, type: LazyElementsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [LazyElementDirective, LazyElementDynamicDirective],
                        imports: [common.CommonModule],
                        exports: [LazyElementDirective, LazyElementDynamicDirective],
                        providers: [],
                    }]
            }], ctorParameters: function () {
            return [{ type: LazyElementsLoaderService }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LAZY_ELEMENT_CONFIGS]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LAZY_ELEMENT_ROOT_GUARD]
                        }] }];
        } });

    /*
     * Public API Surface of elements
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LAZY_ELEMENTS_REGISTRY = LAZY_ELEMENTS_REGISTRY;
    exports.LAZY_ELEMENT_CONFIGS = LAZY_ELEMENT_CONFIGS;
    exports.LAZY_ELEMENT_ROOT_GUARD = LAZY_ELEMENT_ROOT_GUARD;
    exports.LAZY_ELEMENT_ROOT_OPTIONS = LAZY_ELEMENT_ROOT_OPTIONS;
    exports.LazyElementDirective = LazyElementDirective;
    exports.LazyElementDynamicDirective = LazyElementDynamicDirective;
    exports.LazyElementsLoaderService = LazyElementsLoaderService;
    exports.LazyElementsModule = LazyElementsModule;
    exports.createLazyElementRootGuard = createLazyElementRootGuard;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-extensions-elements.umd.js.map
