(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('uploadcare-widget'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-uploadcare-widget', ['exports', '@angular/core', 'uploadcare-widget', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-uploadcare-widget'] = {}, global.ng.core, global.uploadcare, global.ng.common));
}(this, (function (exports, core, uploadcare, common) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var uploadcare__default = /*#__PURE__*/_interopDefaultLegacy(uploadcare);

    ;
    var versions = {
        version: '3.0.2',
        name: 'ngx-uploadcare-widget',
        versionDate: '2022-02-22T10:00:56.543Z',
        description: 'Angular 2+ wrapper for Uploadcare Widget',
    };

    var APP_VERSION = versions.version;

    /* eslint-disable no-underscore-dangle */
    var UcWidgetComponent = /** @class */ (function () {
        function UcWidgetComponent(renderer, element, platformId) {
            this.onUploadComplete = new core.EventEmitter();
            this.onChange = new core.EventEmitter();
            this.onProgress = new core.EventEmitter();
            this._publicKey = 'demopublickey';
            this._value = null;
            this._cdnBase = null;
            this._reinitRequired = false;
            this._isClearValue = false;
            this._validators = [];
            this.element = element;
            this.renderer = renderer;
            this.isInBrowser = common.isPlatformBrowser(platformId);
            if (this.isInBrowser) {
                uploadcare__default['default'].start({ integration: "Angular/" + core.VERSION.full + "; Ngx-Uploadcare-Widget/" + APP_VERSION });
            }
        }
        Object.defineProperty(UcWidgetComponent.prototype, "publicKey", {
            get: function () { return this._publicKey; },
            set: function (publicKey) {
                this._publicKey = publicKey;
                this.setReinitFlag(true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "multiple", {
            get: function () { return this._multiple; },
            set: function (multiple) {
                this._multiple = multiple;
                this.setReinitFlag(true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "multipleMax", {
            get: function () { return this._multipleMax; },
            set: function (multipleMax) {
                this._multipleMax = multipleMax;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "multipleMin", {
            get: function () { return this._multipleMin; },
            set: function (multipleMin) {
                this._multipleMin = multipleMin;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "imagesOnly", {
            get: function () { return this._imagesOnly; },
            set: function (imagesOnly) {
                this._imagesOnly = imagesOnly;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "previewStep", {
            get: function () { return this._previewStep; },
            set: function (previewStep) {
                this._previewStep = previewStep;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "crop", {
            get: function () { return this._crop; },
            set: function (crop) {
                this._crop = crop;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "imageShrink", {
            get: function () { return this._imageShrink; },
            set: function (imageShrink) {
                this._imageShrink = imageShrink;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "clearable", {
            get: function () { return this._clearable; },
            set: function (clearable) {
                this._clearable = clearable;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "tabs", {
            get: function () { return this._tabs; },
            set: function (tabs) {
                this._tabs = tabs;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "inputAcceptTypes", {
            get: function () { return this._inputAcceptTypes; },
            set: function (inputAcceptTypes) {
                this._inputAcceptTypes = inputAcceptTypes;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "preferredTypes", {
            get: function () { return this._preferredTypes; },
            set: function (preferredTypes) {
                this._preferredTypes = preferredTypes;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "systemDialog", {
            get: function () { return this._systemDialog; },
            set: function (systemDialog) {
                this._systemDialog = systemDialog;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "secureSignature", {
            get: function () { return this._secureSignature; },
            set: function (secureSignature) {
                this._secureSignature = secureSignature;
                this.setReinitFlag(true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "secureExpire", {
            get: function () { return this._secureExpire; },
            set: function (secureExpire) {
                this._secureExpire = secureExpire;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "value", {
            get: function () { return this._value; },
            set: function (value) {
                this._value = value;
                if (this.widget) {
                    this.setReinitFlag(false);
                    this.widget.value(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "validators", {
            get: function () { return this._validators; },
            set: function (validatorsArr) {
                this._validators = validatorsArr;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "cdnBase", {
            get: function () { return this._cdnBase; },
            set: function (cdnBase) {
                this._cdnBase = cdnBase;
                this.setReinitFlag(true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UcWidgetComponent.prototype, "doNotStore", {
            get: function () { return this._doNotStore; },
            set: function (doNotStore) {
                this._doNotStore = doNotStore;
                this.setReinitFlag(false);
            },
            enumerable: false,
            configurable: true
        });
        UcWidgetComponent.prototype.ngAfterViewInit = function () {
            if (this.isInBrowser) {
                this.widget = this.init();
            }
        };
        UcWidgetComponent.prototype.ngAfterViewChecked = function () {
            if (this._reinitRequired) {
                this.reset(this._isClearValue);
            }
        };
        UcWidgetComponent.prototype.reset = function (clearUploads) {
            if (clearUploads === void 0) { clearUploads = false; }
            this.destroy();
            this.widget = this.init(clearUploads);
            this._reinitRequired = false;
            this._isClearValue = false;
        };
        UcWidgetComponent.prototype.clearUploads = function () {
            this._value = null;
            if (this.widget) {
                this.widget.value(null);
            }
        };
        UcWidgetComponent.prototype.openDialog = function () {
            if (this.widget) {
                this.dialog = this.widget.openDialog();
            }
        };
        UcWidgetComponent.prototype.reject = function () {
            if (this.dialog) {
                this.dialog.reject();
                this.dialog = null;
            }
        };
        UcWidgetComponent.prototype.setReinitFlag = function (isClearValue) {
            if (this.widget) {
                this._reinitRequired = true;
                this._isClearValue = isClearValue;
            }
        };
        UcWidgetComponent.prototype.setInputAttr = function (key, value) {
            if (value) {
                this.renderer.setAttribute(this.inputElement, key, value);
            }
        };
        UcWidgetComponent.prototype.initInputElement = function () {
            this.setInputAttr('type', 'hidden');
            this.setInputAttr('data-public-key', this._publicKey);
            this.setInputAttr('data-multiple', this._multiple);
            this.setInputAttr('data-multiple-max', this._multipleMax);
            this.setInputAttr('data-multiple-min', this._multipleMin);
            this.setInputAttr('data-images-only', this._imagesOnly);
            this.setInputAttr('data-preview-step', this._previewStep);
            this.setInputAttr('data-crop', this._crop);
            this.setInputAttr('data-image-shrink', this._imageShrink);
            this.setInputAttr('data-clearable', this._clearable);
            this.setInputAttr('data-tabs', this._tabs);
            this.setInputAttr('data-input-accept-types', this._inputAcceptTypes);
            this.setInputAttr('data-preferred-types', this._preferredTypes);
            this.setInputAttr('data-system-dialog', this._systemDialog);
            this.setInputAttr('data-secure-signature', this._secureSignature);
            this.setInputAttr('data-secure-expire', this._secureExpire);
            this.setInputAttr('data-cdn-base', this._cdnBase);
            this.setInputAttr('data-do-not-store', this._doNotStore);
            if (this._value) {
                this.renderer.setProperty(this.inputElement, 'value', this._value);
            }
        };
        UcWidgetComponent.prototype.init = function (removeUploads) {
            var _this = this;
            if (removeUploads === void 0) { removeUploads = false; }
            this.inputElement = this.renderer.createElement('input');
            this.renderer.appendChild(this.element.nativeElement, this.inputElement);
            if (removeUploads) {
                this.clearUploads();
            }
            this.initInputElement();
            var widget = uploadcare__default['default'].Widget(this.inputElement);
            this._validators.forEach(function (v) {
                if (typeof v === 'function') {
                    widget.validators.push(v);
                }
                else {
                    throw new Error('Only functions allowed in validadators array');
                }
            });
            widget.onUploadComplete(function (fileInfo) {
                _this.onUploadComplete.emit(fileInfo);
                _this._value = fileInfo.uuid;
            });
            widget.onChange(function (selectionPromise) {
                _this.onChange.emit(selectionPromise);
                if (!selectionPromise) {
                    return;
                }
                if (typeof selectionPromise.promise === 'function') {
                    selectionPromise.promise()
                        .progress(function (progress) {
                        _this.onProgress.emit(progress);
                    });
                }
                else {
                    selectionPromise
                        .progress(function (progress) {
                        _this.onProgress.emit(progress);
                    });
                }
            });
            widget.onDialogOpen(function (dialogApi) {
                _this.dialog = dialogApi;
            });
            return widget;
        };
        UcWidgetComponent.prototype.destroy = function () {
            var $ = uploadcare__default['default'].jQuery;
            $(this.widget.inputElement.nextSibling).remove();
            $(this.widget.inputElement).clone().appendTo($(this.element.nativeElement));
            $(this.widget.inputElement).remove();
            this.renderer.removeChild(this.element.nativeElement, this.element.nativeElement.children[0]);
            delete this.widget;
        };
        return UcWidgetComponent;
    }());
    UcWidgetComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ngx-uploadcare-widget',
                    template: ''
                },] }
    ];
    UcWidgetComponent.ctorParameters = function () { return [
        { type: core.Renderer2 },
        { type: core.ElementRef },
        { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
    ]; };
    UcWidgetComponent.propDecorators = {
        onUploadComplete: [{ type: core.Output, args: ['on-upload-complete',] }],
        onChange: [{ type: core.Output, args: ['on-change',] }],
        onProgress: [{ type: core.Output, args: ['on-progress',] }],
        publicKey: [{ type: core.Input, args: ['public-key',] }],
        multiple: [{ type: core.Input, args: ['multiple',] }],
        multipleMax: [{ type: core.Input, args: ['multiple-max',] }],
        multipleMin: [{ type: core.Input, args: ['multiple-min',] }],
        imagesOnly: [{ type: core.Input, args: ['images-only',] }],
        previewStep: [{ type: core.Input, args: ['preview-step',] }],
        crop: [{ type: core.Input, args: ['crop',] }],
        imageShrink: [{ type: core.Input, args: ['image-shrink',] }],
        clearable: [{ type: core.Input, args: ['clearable',] }],
        tabs: [{ type: core.Input, args: ['tabs',] }],
        inputAcceptTypes: [{ type: core.Input, args: ['input-accept-types',] }],
        preferredTypes: [{ type: core.Input, args: ['preferred-types',] }],
        systemDialog: [{ type: core.Input, args: ['system-dialog',] }],
        secureSignature: [{ type: core.Input, args: ['secure-signature',] }],
        secureExpire: [{ type: core.Input, args: ['secure-expire',] }],
        value: [{ type: core.Input, args: ['value',] }],
        validators: [{ type: core.Input, args: ['validators',] }],
        cdnBase: [{ type: core.Input, args: ['cdn-base',] }],
        doNotStore: [{ type: core.Input, args: ['do-not-store',] }]
    };

    /* eslint-disable @angular-eslint/no-output-rename, @angular-eslint/no-input-rename, @angular-eslint/no-output-on-prefix */
    var UcWidgetCustomComponent = /** @class */ (function () {
        function UcWidgetCustomComponent(platformId) {
            this.onUploadComplete = new core.EventEmitter();
            this.onChange = new core.EventEmitter();
            this.onProgress = new core.EventEmitter();
            this.publicKey = 'demopublickey';
            this.validators = [];
            var isInBrowser = common.isPlatformBrowser(platformId);
            if (isInBrowser) {
                uploadcare__default['default'].start({ integration: "Angular/" + core.VERSION.full + "; Ngx-Uploadcare-Widget/" + APP_VERSION });
            }
        }
        UcWidgetCustomComponent.prototype.openDialog = function () {
            var _this = this;
            var config = {
                publicKey: this.publicKey ? this.publicKey : undefined,
                multiple: this.multiple,
                multipleMax: this.multipleMax,
                multipleMin: this.multipleMin,
                imagesOnly: this.imagesOnly,
                previewStep: this.previewStep,
                crop: this.crop ? this.crop : undefined,
                imageShrink: this.imageShrink ? this.imageShrink : undefined,
                clearable: this.clearable,
                tabs: this.tabs ? this.tabs : undefined,
                inputAcceptTypes: this.inputAcceptTypes ? this.inputAcceptTypes : undefined,
                preferredTypes: this.preferredTypes,
                systemDialog: this.systemDialog,
                secureSignature: this.secureSignature,
                secureExpire: this.secureExpire,
                value: this.value ? this.value : undefined,
                cdnBase: this.cdnBase ? this.cdnBase : undefined,
                doNotStore: this.doNotStore,
                validators: this.validators.filter(function (v) {
                    if (typeof v !== 'function') {
                        throw new Error('Only functions allowed in validadators array');
                    }
                    return v;
                }),
            };
            this.dialog = uploadcare__default['default'].openDialog(this.value, null, config);
            this.dialog.done(function (selectionPromise) {
                _this.onChange.emit(selectionPromise);
                if (typeof selectionPromise.promise === 'function') {
                    selectionPromise.promise()
                        .then(function (groupInfo) {
                        _this.onUploadComplete.emit(groupInfo);
                    })
                        .progress(function (progress) {
                        _this.onProgress.emit(progress);
                    });
                }
                else {
                    selectionPromise
                        .then(function (fileInfo) {
                        _this.onUploadComplete.emit(fileInfo);
                    })
                        .progress(function (progress) {
                        _this.onProgress.emit(progress);
                    });
                }
            });
        };
        UcWidgetCustomComponent.prototype.reject = function () {
            if (this.dialog) {
                this.dialog.reject();
                this.dialog = null;
            }
        };
        return UcWidgetCustomComponent;
    }());
    UcWidgetCustomComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ngx-uploadcare-widget-custom',
                    template: ''
                },] }
    ];
    UcWidgetCustomComponent.ctorParameters = function () { return [
        { type: String, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
    ]; };
    UcWidgetCustomComponent.propDecorators = {
        onUploadComplete: [{ type: core.Output, args: ['on-upload-complete',] }],
        onChange: [{ type: core.Output, args: ['on-change',] }],
        onProgress: [{ type: core.Output, args: ['on-progress',] }],
        publicKey: [{ type: core.Input, args: ['public-key',] }],
        multiple: [{ type: core.Input, args: ['multiple',] }],
        multipleMax: [{ type: core.Input, args: ['multiple-max',] }],
        multipleMin: [{ type: core.Input, args: ['multiple-min',] }],
        imagesOnly: [{ type: core.Input, args: ['images-only',] }],
        previewStep: [{ type: core.Input, args: ['preview-step',] }],
        crop: [{ type: core.Input, args: ['crop',] }],
        imageShrink: [{ type: core.Input, args: ['image-shrink',] }],
        clearable: [{ type: core.Input, args: ['clearable',] }],
        tabs: [{ type: core.Input, args: ['tabs',] }],
        inputAcceptTypes: [{ type: core.Input, args: ['input-accept-types',] }],
        preferredTypes: [{ type: core.Input, args: ['preferred-types',] }],
        systemDialog: [{ type: core.Input, args: ['system-dialog',] }],
        secureSignature: [{ type: core.Input, args: ['secure-signature',] }],
        secureExpire: [{ type: core.Input, args: ['secure-expire',] }],
        value: [{ type: core.Input, args: ['value',] }],
        cdnBase: [{ type: core.Input, args: ['cdn-base',] }],
        doNotStore: [{ type: core.Input, args: ['do-not-store',] }],
        validators: [{ type: core.Input, args: ['validators',] }]
    };

    var UcWidgetModule = /** @class */ (function () {
        function UcWidgetModule() {
        }
        return UcWidgetModule;
    }());
    UcWidgetModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        UcWidgetCustomComponent,
                        UcWidgetComponent
                    ],
                    imports: [],
                    providers: [],
                    bootstrap: [],
                    exports: [
                        UcWidgetCustomComponent,
                        UcWidgetComponent
                    ],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.UcWidgetComponent = UcWidgetComponent;
    exports.UcWidgetCustomComponent = UcWidgetCustomComponent;
    exports.UcWidgetModule = UcWidgetModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-uploadcare-widget.umd.js.map
