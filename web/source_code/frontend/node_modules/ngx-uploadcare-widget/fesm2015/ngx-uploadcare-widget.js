import { EventEmitter, VERSION, Component, Renderer2, ElementRef, Inject, PLATFORM_ID, Output, Input, NgModule } from '@angular/core';
import uploadcare from 'uploadcare-widget';
import { isPlatformBrowser } from '@angular/common';

;
const versions = {
    version: '3.0.2',
    name: 'ngx-uploadcare-widget',
    versionDate: '2022-02-22T10:00:56.543Z',
    description: 'Angular 2+ wrapper for Uploadcare Widget',
};

const APP_VERSION = versions.version;

/* eslint-disable no-underscore-dangle */
class UcWidgetComponent {
    constructor(renderer, element, platformId) {
        this.onUploadComplete = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onProgress = new EventEmitter();
        this._publicKey = 'demopublickey';
        this._value = null;
        this._cdnBase = null;
        this._reinitRequired = false;
        this._isClearValue = false;
        this._validators = [];
        this.element = element;
        this.renderer = renderer;
        this.isInBrowser = isPlatformBrowser(platformId);
        if (this.isInBrowser) {
            uploadcare.start({ integration: `Angular/${VERSION.full}; Ngx-Uploadcare-Widget/${APP_VERSION}` });
        }
    }
    set publicKey(publicKey) {
        this._publicKey = publicKey;
        this.setReinitFlag(true);
    }
    get publicKey() { return this._publicKey; }
    set multiple(multiple) {
        this._multiple = multiple;
        this.setReinitFlag(true);
    }
    get multiple() { return this._multiple; }
    set multipleMax(multipleMax) {
        this._multipleMax = multipleMax;
        this.setReinitFlag(false);
    }
    get multipleMax() { return this._multipleMax; }
    set multipleMin(multipleMin) {
        this._multipleMin = multipleMin;
        this.setReinitFlag(false);
    }
    get multipleMin() { return this._multipleMin; }
    set imagesOnly(imagesOnly) {
        this._imagesOnly = imagesOnly;
        this.setReinitFlag(false);
    }
    get imagesOnly() { return this._imagesOnly; }
    set previewStep(previewStep) {
        this._previewStep = previewStep;
        this.setReinitFlag(false);
    }
    get previewStep() { return this._previewStep; }
    set crop(crop) {
        this._crop = crop;
        this.setReinitFlag(false);
    }
    get crop() { return this._crop; }
    set imageShrink(imageShrink) {
        this._imageShrink = imageShrink;
        this.setReinitFlag(false);
    }
    get imageShrink() { return this._imageShrink; }
    set clearable(clearable) {
        this._clearable = clearable;
        this.setReinitFlag(false);
    }
    get clearable() { return this._clearable; }
    set tabs(tabs) {
        this._tabs = tabs;
        this.setReinitFlag(false);
    }
    get tabs() { return this._tabs; }
    set inputAcceptTypes(inputAcceptTypes) {
        this._inputAcceptTypes = inputAcceptTypes;
        this.setReinitFlag(false);
    }
    get inputAcceptTypes() { return this._inputAcceptTypes; }
    set preferredTypes(preferredTypes) {
        this._preferredTypes = preferredTypes;
        this.setReinitFlag(false);
    }
    get preferredTypes() { return this._preferredTypes; }
    set systemDialog(systemDialog) {
        this._systemDialog = systemDialog;
        this.setReinitFlag(false);
    }
    get systemDialog() { return this._systemDialog; }
    set secureSignature(secureSignature) {
        this._secureSignature = secureSignature;
        this.setReinitFlag(true);
    }
    get secureSignature() { return this._secureSignature; }
    set secureExpire(secureExpire) {
        this._secureExpire = secureExpire;
        this.setReinitFlag(false);
    }
    get secureExpire() { return this._secureExpire; }
    set value(value) {
        this._value = value;
        if (this.widget) {
            this.setReinitFlag(false);
            this.widget.value(value);
        }
    }
    get value() { return this._value; }
    set validators(validatorsArr) {
        this._validators = validatorsArr;
        this.setReinitFlag(false);
    }
    get validators() { return this._validators; }
    set cdnBase(cdnBase) {
        this._cdnBase = cdnBase;
        this.setReinitFlag(true);
    }
    get cdnBase() { return this._cdnBase; }
    set doNotStore(doNotStore) {
        this._doNotStore = doNotStore;
        this.setReinitFlag(false);
    }
    get doNotStore() { return this._doNotStore; }
    ngAfterViewInit() {
        if (this.isInBrowser) {
            this.widget = this.init();
        }
    }
    ngAfterViewChecked() {
        if (this._reinitRequired) {
            this.reset(this._isClearValue);
        }
    }
    reset(clearUploads = false) {
        this.destroy();
        this.widget = this.init(clearUploads);
        this._reinitRequired = false;
        this._isClearValue = false;
    }
    clearUploads() {
        this._value = null;
        if (this.widget) {
            this.widget.value(null);
        }
    }
    openDialog() {
        if (this.widget) {
            this.dialog = this.widget.openDialog();
        }
    }
    reject() {
        if (this.dialog) {
            this.dialog.reject();
            this.dialog = null;
        }
    }
    setReinitFlag(isClearValue) {
        if (this.widget) {
            this._reinitRequired = true;
            this._isClearValue = isClearValue;
        }
    }
    setInputAttr(key, value) {
        if (value) {
            this.renderer.setAttribute(this.inputElement, key, value);
        }
    }
    initInputElement() {
        this.setInputAttr('type', 'hidden');
        this.setInputAttr('data-public-key', this._publicKey);
        this.setInputAttr('data-multiple', this._multiple);
        this.setInputAttr('data-multiple-max', this._multipleMax);
        this.setInputAttr('data-multiple-min', this._multipleMin);
        this.setInputAttr('data-images-only', this._imagesOnly);
        this.setInputAttr('data-preview-step', this._previewStep);
        this.setInputAttr('data-crop', this._crop);
        this.setInputAttr('data-image-shrink', this._imageShrink);
        this.setInputAttr('data-clearable', this._clearable);
        this.setInputAttr('data-tabs', this._tabs);
        this.setInputAttr('data-input-accept-types', this._inputAcceptTypes);
        this.setInputAttr('data-preferred-types', this._preferredTypes);
        this.setInputAttr('data-system-dialog', this._systemDialog);
        this.setInputAttr('data-secure-signature', this._secureSignature);
        this.setInputAttr('data-secure-expire', this._secureExpire);
        this.setInputAttr('data-cdn-base', this._cdnBase);
        this.setInputAttr('data-do-not-store', this._doNotStore);
        if (this._value) {
            this.renderer.setProperty(this.inputElement, 'value', this._value);
        }
    }
    init(removeUploads = false) {
        this.inputElement = this.renderer.createElement('input');
        this.renderer.appendChild(this.element.nativeElement, this.inputElement);
        if (removeUploads) {
            this.clearUploads();
        }
        this.initInputElement();
        const widget = uploadcare.Widget(this.inputElement);
        this._validators.forEach(v => {
            if (typeof v === 'function') {
                widget.validators.push(v);
            }
            else {
                throw new Error('Only functions allowed in validadators array');
            }
        });
        widget.onUploadComplete((fileInfo) => {
            this.onUploadComplete.emit(fileInfo);
            this._value = fileInfo.uuid;
        });
        widget.onChange((selectionPromise) => {
            this.onChange.emit(selectionPromise);
            if (!selectionPromise) {
                return;
            }
            if (typeof selectionPromise.promise === 'function') {
                selectionPromise.promise()
                    .progress((progress) => {
                    this.onProgress.emit(progress);
                });
            }
            else {
                selectionPromise
                    .progress((progress) => {
                    this.onProgress.emit(progress);
                });
            }
        });
        widget.onDialogOpen((dialogApi) => {
            this.dialog = dialogApi;
        });
        return widget;
    }
    destroy() {
        const $ = uploadcare.jQuery;
        $(this.widget.inputElement.nextSibling).remove();
        $(this.widget.inputElement).clone().appendTo($(this.element.nativeElement));
        $(this.widget.inputElement).remove();
        this.renderer.removeChild(this.element.nativeElement, this.element.nativeElement.children[0]);
        delete this.widget;
    }
}
UcWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-uploadcare-widget',
                template: ''
            },] }
];
UcWidgetComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
UcWidgetComponent.propDecorators = {
    onUploadComplete: [{ type: Output, args: ['on-upload-complete',] }],
    onChange: [{ type: Output, args: ['on-change',] }],
    onProgress: [{ type: Output, args: ['on-progress',] }],
    publicKey: [{ type: Input, args: ['public-key',] }],
    multiple: [{ type: Input, args: ['multiple',] }],
    multipleMax: [{ type: Input, args: ['multiple-max',] }],
    multipleMin: [{ type: Input, args: ['multiple-min',] }],
    imagesOnly: [{ type: Input, args: ['images-only',] }],
    previewStep: [{ type: Input, args: ['preview-step',] }],
    crop: [{ type: Input, args: ['crop',] }],
    imageShrink: [{ type: Input, args: ['image-shrink',] }],
    clearable: [{ type: Input, args: ['clearable',] }],
    tabs: [{ type: Input, args: ['tabs',] }],
    inputAcceptTypes: [{ type: Input, args: ['input-accept-types',] }],
    preferredTypes: [{ type: Input, args: ['preferred-types',] }],
    systemDialog: [{ type: Input, args: ['system-dialog',] }],
    secureSignature: [{ type: Input, args: ['secure-signature',] }],
    secureExpire: [{ type: Input, args: ['secure-expire',] }],
    value: [{ type: Input, args: ['value',] }],
    validators: [{ type: Input, args: ['validators',] }],
    cdnBase: [{ type: Input, args: ['cdn-base',] }],
    doNotStore: [{ type: Input, args: ['do-not-store',] }]
};

/* eslint-disable @angular-eslint/no-output-rename, @angular-eslint/no-input-rename, @angular-eslint/no-output-on-prefix */
class UcWidgetCustomComponent {
    constructor(platformId) {
        this.onUploadComplete = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onProgress = new EventEmitter();
        this.publicKey = 'demopublickey';
        this.validators = [];
        const isInBrowser = isPlatformBrowser(platformId);
        if (isInBrowser) {
            uploadcare.start({ integration: `Angular/${VERSION.full}; Ngx-Uploadcare-Widget/${APP_VERSION}` });
        }
    }
    openDialog() {
        const config = {
            publicKey: this.publicKey ? this.publicKey : undefined,
            multiple: this.multiple,
            multipleMax: this.multipleMax,
            multipleMin: this.multipleMin,
            imagesOnly: this.imagesOnly,
            previewStep: this.previewStep,
            crop: this.crop ? this.crop : undefined,
            imageShrink: this.imageShrink ? this.imageShrink : undefined,
            clearable: this.clearable,
            tabs: this.tabs ? this.tabs : undefined,
            inputAcceptTypes: this.inputAcceptTypes ? this.inputAcceptTypes : undefined,
            preferredTypes: this.preferredTypes,
            systemDialog: this.systemDialog,
            secureSignature: this.secureSignature,
            secureExpire: this.secureExpire,
            value: this.value ? this.value : undefined,
            cdnBase: this.cdnBase ? this.cdnBase : undefined,
            doNotStore: this.doNotStore,
            validators: this.validators.filter(v => {
                if (typeof v !== 'function') {
                    throw new Error('Only functions allowed in validadators array');
                }
                return v;
            }),
        };
        this.dialog = uploadcare.openDialog(this.value, null, config);
        this.dialog.done((selectionPromise) => {
            this.onChange.emit(selectionPromise);
            if (typeof selectionPromise.promise === 'function') {
                selectionPromise.promise()
                    .then((groupInfo) => {
                    this.onUploadComplete.emit(groupInfo);
                })
                    .progress((progress) => {
                    this.onProgress.emit(progress);
                });
            }
            else {
                selectionPromise
                    .then((fileInfo) => {
                    this.onUploadComplete.emit(fileInfo);
                })
                    .progress((progress) => {
                    this.onProgress.emit(progress);
                });
            }
        });
    }
    reject() {
        if (this.dialog) {
            this.dialog.reject();
            this.dialog = null;
        }
    }
}
UcWidgetCustomComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-uploadcare-widget-custom',
                template: ''
            },] }
];
UcWidgetCustomComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
UcWidgetCustomComponent.propDecorators = {
    onUploadComplete: [{ type: Output, args: ['on-upload-complete',] }],
    onChange: [{ type: Output, args: ['on-change',] }],
    onProgress: [{ type: Output, args: ['on-progress',] }],
    publicKey: [{ type: Input, args: ['public-key',] }],
    multiple: [{ type: Input, args: ['multiple',] }],
    multipleMax: [{ type: Input, args: ['multiple-max',] }],
    multipleMin: [{ type: Input, args: ['multiple-min',] }],
    imagesOnly: [{ type: Input, args: ['images-only',] }],
    previewStep: [{ type: Input, args: ['preview-step',] }],
    crop: [{ type: Input, args: ['crop',] }],
    imageShrink: [{ type: Input, args: ['image-shrink',] }],
    clearable: [{ type: Input, args: ['clearable',] }],
    tabs: [{ type: Input, args: ['tabs',] }],
    inputAcceptTypes: [{ type: Input, args: ['input-accept-types',] }],
    preferredTypes: [{ type: Input, args: ['preferred-types',] }],
    systemDialog: [{ type: Input, args: ['system-dialog',] }],
    secureSignature: [{ type: Input, args: ['secure-signature',] }],
    secureExpire: [{ type: Input, args: ['secure-expire',] }],
    value: [{ type: Input, args: ['value',] }],
    cdnBase: [{ type: Input, args: ['cdn-base',] }],
    doNotStore: [{ type: Input, args: ['do-not-store',] }],
    validators: [{ type: Input, args: ['validators',] }]
};

class UcWidgetModule {
}
UcWidgetModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    UcWidgetCustomComponent,
                    UcWidgetComponent
                ],
                imports: [],
                providers: [],
                bootstrap: [],
                exports: [
                    UcWidgetCustomComponent,
                    UcWidgetComponent
                ],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { UcWidgetComponent, UcWidgetCustomComponent, UcWidgetModule };
//# sourceMappingURL=ngx-uploadcare-widget.js.map
