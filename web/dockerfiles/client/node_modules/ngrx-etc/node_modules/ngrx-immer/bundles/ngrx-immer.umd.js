(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('immer')) :
    typeof define === 'function' && define.amd ? define('ngrx-immer', ['exports', 'immer'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ngrx-immer"] = {}, global.immer));
})(this, (function (exports, immer) { 'use strict';

    /**
     * Helper method that wraps a reducer with the Immer `produce` method
     * Kudos to Alex Okrushko {@link https://lookout.dev/rules/simple-immer-base-function-to-be-used-in-ngrx-store-or-componentstore-for-transforming-data-%22mutably%22}
     */
    function immerReducer(callback) {
        return function (state, next) {
            return immer.produce(state, function (draft) { return callback(draft, next); });
        };
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.immerReducer = immerReducer;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngrx-immer.umd.js.map
