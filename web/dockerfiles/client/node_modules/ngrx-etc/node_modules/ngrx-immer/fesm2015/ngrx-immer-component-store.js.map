{"version":3,"file":"ngrx-immer-component-store.js","sources":["../../src/component-store/index.ts","../../src/component-store/ngrx-immer-component-store.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { ComponentStore } from '@ngrx/component-store';\n\nimport { immerReducer } from 'ngrx-immer/shared';\n\n/**\n * Immer wrapper around `ImmerComponentStore` to mutate state\n * with `updater` and `setState`\n */\n@Injectable()\nexport class ImmerComponentStore<\n\tState extends object\n> extends ComponentStore<State> {\n\tupdater<\n\t\tProvidedType = void,\n\t\tOriginType = ProvidedType,\n\t\tValueType = OriginType,\n\t\tReturnType = OriginType extends void\n\t\t\t? () => void\n\t\t\t: (observableOrValue: ValueType | Observable<ValueType>) => Subscription\n\t>(updaterFn: (state: State, value: OriginType) => void | State): ReturnType {\n\t\treturn super.updater(immerReducer(updaterFn));\n\t}\n\n\tsetState(stateOrUpdaterFn: State | ((state: State) => void | State)): void {\n\t\tsuper.setState(stateOrUpdaterFn as State | ((state: State) => State));\n\t}\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;AAMA;;;;MAKa,mBAEX,SAAQ,cAAqB;IAC9B,OAAO,CAOL,SAA4D;QAC7D,OAAO,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;KAC9C;IAED,QAAQ,CAAC,gBAA0D;QAClE,KAAK,CAAC,QAAQ,CAAC,gBAAqD,CAAC,CAAC;KACtE;;;YAjBD,UAAU;;;ACVX;;;;;;"}