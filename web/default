##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

server {
	# include cors_support.conf;
	# include cors_wide_open.conf;
	# add_header Access-Control-Allow-Origin *;
	listen 80 default_server;
	listen [::]:80 default_server;
	
	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;
	# add_header 'Access-Control-Allow-Origin' '*';
	# add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
	root /var/www/frontend/dist/angular-ngrx-material-starter;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location /profile/ {
		include cors_support.conf;
		# add_header Access-Control-Allow-Origin *;
		# include cors_wide_open.conf;
		# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# proxy_set_header Host $host;
		proxy_pass	http://127.0.0.1:8002;
		# proxy_http_version		1.1;
		# proxy_set_header		Upgrade $http_upgrade;
		# proxy_set_header		Connection "upgrade";
		# proxy_set_header		Host $http_host:
		# proxy_set_header		X-Real-IP $remote_addr;
		# rewrite ^/profile(/profile/)$ $1 break;
		# proxy_redirect default;
		include /etc/nginx/app/include.websocket;
		include /etc/nginx/app/include.forwarded;
		# proxy_pass		http://127.0.0.1:8002/profile;
	}

	location /feed/ {
		include cors_support.conf;
		# include cors_wide_open.conf;
		proxy_pass	http://127.0.0.1:8003/feed/;
		rewrite ^/profile(/.*)$ $1 break;
		proxy_redirect default;
		include /etc/nginx/app/include.websocket;
		include /etc/nginx/app/include.forwarded;
	}

	location / {
		# add_header Access-Control-Allow-Origin *;
		# include cors_wide_open.conf;
		# include cors_support.conf;
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ $uri.html /index.html =404;
	}

        location /api/ {
		# add_header Access-Control-Allow-Origin *;
		include cors_support.conf;
		# include cors_wide_open.conf;
		# add_header 'Access-Control-Allow-Origin' '*';
		# add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';		
		proxy_pass	http://127.0.0.1:8001;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
	location ~^/(cuties) {

		proxy_pass	http://127.0.0.1:8009;
		rewrite ^/cuties(/.*)$ $1 break;
		proxy_redirect default;
		include /etc/nginx/app/include.websocket;
		include /etc/nginx/app/include.forwarded;
	}
#	location ~^/(kafka-broker-listener) {
#		rewrite ^/kafka-broker-listener(/.*)$ $1 break;
#		proxy_pass	http://0.0.0.0:9092;
#		proxy_redirect default;
		
#	}
#	location ~^/(kafka-registry-listener) {
#		rewrite ^/kafka-registry-listener(/.*)$ $1 break;
#		proxy_pass	http://127.0.0.1:8081;
#		proxy_redirect default;
#	}
	
}

#server {
#	listen			9000;
#	server_name		10.100.100.8;
	
#	location /		{
#		proxy_pass	http://127.0.0.1:8081;
#	}
#}
#server {
#	listen			9001;
#	server_name		10.100.100.8;
	
#	location /		{
#		proxy_pass	http://127.0.0.1:9092;
#	}
#}























# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
